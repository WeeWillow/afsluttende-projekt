---
import "../../styles/global.css";
import Layout from "../../layouts/Layout.astro";
import Bike from "phosphor-astro/PersonSimpleBike.astro";
import Dog from "phosphor-astro/Dog.astro";
import Walking from "phosphor-astro/PersonSimpleWalk.astro";
import Heart from "phosphor-astro/Heart.astro";
import Breadcrumb from "../../components/modules/Breadcrumb.astro";
import Tabs from "../../components/modules/Tabs.vue";
import ProductImageGallery from "../../components/modules/ProductImageGallery.vue";
import KlubDanmark from "../../components/layout/KlubDanmark.astro";
import PopularInShop from "../../components/layout/PopularInShop.astro";

// https://medium.com/@flnzba/dynamic-routes-in-astro-load-parameters-from-json-be766a7a2a17
// Definere en asynkron funktion
export async function getStaticPaths() {
  // Henter data fra vores strapi
  const response = await fetch(
    "https://young-gift-22aff10d38.strapiapp.com/api/products?populate=*",
  );
  // konvetere daten til json
  const data = await response.json();
  // får fat i produkterne fra json daten
  const products = data.data;

  // retunere en liste af ruter og sender dem som en prop
  return products.map((product: any) => ({
    params: { slug: product.title.toLowerCase() },
    props: { product },
  }));
}

// type defineret for typescript
type Product = {
  title: string;
  brands: string;
  price: number;
  oldPrice: number;
  about: { description: any[] };
  access: { details: string };
  terms: { terms_and_conditions: string };
  images: { formats: { large: { url: string }; small: { url: string } } }[];
  highlights: any[];
  categories: { name: string }[];
};

const { product } = Astro.props as { product: Product };
const title = product.title;
const brand = product.brands;
const price = product.price;
const oldPrice = product.oldPrice;
const about = product.about.description;
const access = product.access.details;
const terms = product.terms.terms_and_conditions;
const images = product.images;
const highlights = product.highlights;
const coverImage = images?.[0]?.formats?.large?.url ?? "";
const categories = product.categories;

const tag = product.categories[0].name;

let tagColor = "";
let tagBgColor = "";

// Hvis tagget har en bestemt string, for den en anden farve
if (tag === "Restaurantoplevelse") {
  tagColor = "var(--secondary-500)";
  tagBgColor = "var(--secondary-200)";
} else if (tag === "Vandrerute") {
  tagColor = "var(--utility-500)";
  tagBgColor = "var(--utility-300)";
} else if (tag === "Ophold") {
  tagColor = "var(--accent-500)";
  tagBgColor = "var(--accent-100)";
} else if (tag === "Nordjylland" || tag === "Midtjylland") {
  tagColor = "var(--primary-600)";
  tagBgColor = "var(--primary-200-t1)";
}

const categorySymbols: { [key: string]: any } = {
  t_cycling: Bike,
  t_dog_leashed: Dog,
  t_walking: Walking,
};

const aboutText = about.map((p) => p.children[0].text);
---

<Layout title={title}>
  <Breadcrumb />
  <section class="product-section">
    <ProductImageGallery
      images={images}
      coverImage={coverImage}
      title={title}
      client:load
    />

    <article class="product-info-container">
      <div class="product-tags-container flex">
        <div
          class="product-tag"
          style={{
            backgroundColor: tagBgColor,
            border: `1px solid ${tagColor}`,
          }}
        >
          <p
            style={{
              color: tagColor,
            }}
          >
            {tag}
          </p>
        </div>
        <div class="product-categories">
          <!-- Map fungere som et forloop. Map er mere læsevenligt og bruges til at ændre et array-->
          <!-- Looper gennem hver kategori, finder den rigtige kategori baseret på dens navn, viser ikonet hvis kategorien findes -->
          {
            categories.map((category) => {
              const IconComponent = categorySymbols[category.name];
              return IconComponent ? (
                <span title={category.name} class="product-category-icon">
                  <IconComponent
                    width="24"
                    height="24"
                    color="var(--secondary-500)"
                  />
                </span>
              ) : null;
            })
          }
        </div>
      </div>
      <h1>{title}</h1>
      <p class="product-brand">{brand}</p>
      <article class="highlights flex">
        {
          // Hvis array af highlights er ikke tom, går den igennem hvert highlight. hvis hightlight.__component, matcher en bestemt type, vil den vises.
          highlights.length > 0 &&
            highlights.map((highlight) => {
              if (highlight.__component === "highlights.poi") {
                return (
                  <div>
                    <h3>{highlight.stops}</h3>
                    <p>{highlight.type_of_poi}</p>
                  </div>
                );
              }

              if (highlight.__component === "highlights.poi") {
                return (
                  <div>
                    <h3>{highlight.stops}</h3>
                    <p>Stops</p>
                  </div>
                );
              }

              if (highlight.__component === "highlights.distance") {
                return (
                  <div>
                    <h3>
                      {highlight.length} {highlight.distanceUnit}
                    </h3>
                    <p>Længde</p>
                  </div>
                );
              }

              if (highlight.__component === "highlights.duration") {
                return (
                  <div>
                    <h3>
                      {highlight.hours}
                      {highlight.tim} {highlight.minutes}
                      {highlight.min}
                    </h3>
                    <p>Varighed</p>
                  </div>
                );
              }
            })
        }
      </article>

      <div>
        <Tabs client:load about={aboutText} access={access} terms={terms} />
      </div>

      <div class="product-buying-container">
        <div class="product-prices">
          <p class="old">{oldPrice} kr.</p>
          <p class="current">{price} Kr.</p>
        </div>
        <div class="product-btns flex">
          <div class="product-counter flex">
            <button class="plus">−</button>
            <input type="number" value="1" min="1" />
            <button class="minus">+</button>
          </div>
          <button class="cart">Tilføj til kurv</button>
          <button class="heart"
            ><Heart width="24" height="24" color="var(--primary-500)" /></button
          >
        </div>
      </div>
    </article>
  </section>

  <KlubDanmark />
  <PopularInShop heading="Anbefalede produkter" />
</Layout>

<style>
  .product-categories {
    gap: 0.25rem;
  }

  .product-tag {
    padding: 0.42rem 0.6rem;
    border-radius: var(--round-pill);
  }

  .product-section {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    grid-template-rows: auto;
    gap: 1.5rem;
  }

  .product-counter {
    align-items: center;

    button {
      cursor: pointer;
      color: var(--primary-500);
      padding: 0 0.75rem;
      height: 38px;
      font-size: 1rem;
      background-color: var(--greyscale-100);
      border: 1px solid var(--primary-500);
      transition: transform 100ms ease-in-out;
      &:active {
        transform: scale(0.97);
      }
    }

    .plus {
      border-top-left-radius: var(--round-min);
      border-bottom-left-radius: var(--round-min);
    }
    .minus {
      border-top-right-radius: var(--round-min);
      border-bottom-right-radius: var(--round-min);
    }

    input {
      color: var(--primary-700);
      width: 3rem;
      height: 38px;
      text-align: center;
      margin: 0 -1px;
      border: 1px solid var(--primary-500);
    }
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
      appearance: none;
      margin: 0;
    }

    input[type="number"] {
      -moz-appearance: textfield;
    }
  }

  .product-prices {
    margin-top: 10px;
    display: flex;
    justify-content: flex-end;
    .old {
      font-size: 0.8rem;
      color: grey;
      text-decoration-line: line-through;
    }

    .current {
      margin-top: 7px;
      font-size: 2rem;
    }
  }

  .cart {
    flex: 1;
    background-color: var(--secondary-500);
    border: 1px solid transparent;
    color: var(--secondary-200);
    height: 38px;
    border-radius: var(--round-min);
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 200ms ease-in-out;
    outline: 1px solid transparent;

    &:hover {
      outline-color: var(--accent-500);
      outline-offset: 0.2rem;
      transform: scale(0.97);
      border-color: var(--accent-500);
      background: var(--accent-500);
      color: var(--accent-100);
    }
  }

  .heart {
    background-color: var(--primary-400-t2);
    border: solid 1px var(--primary-500);
    border-radius: var(--round-min);
    align-items: center;
    justify-content: center;
    aspect-ratio: 1 / 1;
    cursor: pointer;
    transition: transform 100ms ease-in-out;

    &:active {
      transform: scale(0.97);
    }
  }

  .product-btns {
    align-items: center;
    justify-content: space-between;
    gap: 0.25rem;
  }

  .product-tags-container {
    gap: 0.25rem;
    align-items: center;
  }

  .product-category {
    margin-right: 50px;
  }

  .product-category-icon {
    background-color: var(--secondary-200-t2);
    border-radius: var(--round-50);
    padding: 0.25rem;
    display: inline-flex;
    border: 1px solid var(--secondary-500);
  }

  h1 {
    color: var(--primary-700);
    font-size: var(--font-size-700);
    font-weight: var(--text-700);
  }

  .product-brand {
    color: var(--primary-500);
    font-weight: var(--text-400);
    margin-bottom: 20px;
  }

  .highlights {
    justify-content: space-between;
    gap: 0.25rem 1rem;
    flex-wrap: wrap;
    min-width: fit-content; /*tror ikke den gør noget, men lader den være for sikkerhedsskyld*/

    div {
      flex: 1;
      padding: 10px;
      width: max-content;
      text-align: center;
      background-color: var(--primary-400-t2);
      color: var(--primary-600);
      border: 1px solid var(--primary-600);
      border-radius: var(--round-general);
      margin-bottom: 15px;

      h3 {
        text-transform: capitalize;
      }
    }
  }

  @media screen and (min-width: 1000px) {
    .product-section {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: auto;
      gap: 3rem;
      height: fit-content;
    }
  }
</style>
